<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <title>District Resourcing</title>
    <style>

      @import url(http://fonts.googleapis.com/css?family=PT+Serif|PT+Serif:b|PT+Serif:i|PT+Sans|PT+Sans:b);

      html {
        min-width: 1040px;
      }

      body {
        background: #fcfcfa;
        color: #333;
        font-family: "PT Serif", serif;
        margin: 1em auto 4em auto;
        position: relative;
        width: 960px;
      }

      header,
      footer,
      h1,
      h2,
      h3,
      h4,
      aside {
        color: #000;
        font-family: "PT Sans", sans-serif;
      }

      h1 {
        font-size: 64px;
        font-weight: 300;
        letter-spacing: -2px;
        margin: .3em 0 .1em 0;
      }

      h2 {
        margin-top: 2em;
      }

      h1, h2 {
        text-rendering: optimizeLegibility;
      }

      h2 a {
        color: #ccc;
        left: -20px;
        position: absolute;
        width: 740px;
      }

      footer {
        font-size: small;
        margin-top: 8em;
      }

      header aside {
        margin-top: 80px;
      }

      header aside,
      footer aside {
        color: #636363;
        text-align: right;
      }

      aside {
        font-size: small;
        right: 0;
        position: absolute;
        width: 180px;
      }

      .attribution {
        font-size: small;
        margin-bottom: 2em;
      }

      body > p, li > p {
        line-height: 1.5em;
      }

      body > p {
        width: 720px;
      }

      body > blockquote {
        width: 640px;
      }

      li {
        width: 680px;
      }

      a {
        color: steelblue;
      }

      a:not(:hover) {
        text-decoration: none;
      }

      pre, code, textarea {
        font-family: "Menlo", monospace;
      }

      code {
        line-height: 1em;
      }

      textarea {
        font-size: 100%;
      }

      body > pre {
        border-left: solid 2px #ccc;
        padding-left: 18px;
        margin: 2em 0 2em -20px;
      }

      .html .value,
      .javascript .string,
      .javascript .regexp {
        color: #756bb1;
      }

      .html .tag,
      .css .tag,
      .javascript .keyword {
        color: #3182bd;
      }

      .comment {
        color: #636363;
      }

      .html .doctype,
      .javascript .number {
        color: #31a354;
      }

      .html .attribute,
      .css .attribute,
      .javascript .class,
      .javascript .special {
        color: #e6550d;
      }

      svg {
        font: 10px sans-serif;
      }

      .axis path, .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
      }

      sup, sub {
        line-height: 0;
      }

      q:before,
      blockquote:before {
        content: "“";
      }

      q:after,
      blockquote:after {
        content: "”";
      }

      blockquote:before {
        position: absolute;
        left: 2em;
      }

      blockquote:after {
        position: absolute;
      }

      #circle circle {
        fill: none;
        pointer-events: all;
      }

      .group path {
        fill-opacity: .5;
      }

      path.chord {
        stroke: #000;
        stroke-width: .25px;
      }

      path.chord title {
        width: 580px;
      }

      #circle:hover path.fade {
        display: none;
      }

    </style>

  </head>
  <body>

    <script src="./d3.v2.min.js"></script>
    <script>

      var colours = {
        "1"   : "#884444",
        "2"   : "#448844",
        "208" : "#444488",
        "209" : "#884488",
        "296" : "#888844",
        "297" : "#888888"
      };
  
      var width = 720,
          height = 720,
          outerRadius = Math.min(width, height) / 2 - 10,
          innerRadius = outerRadius - 24;

      var formatPercent = d3.format(".1%");

      var arc = d3.svg.arc()
          .innerRadius(innerRadius)
          .outerRadius(outerRadius);

      var layout = d3.layout.chord()
          .padding(.04)
          .sortSubgroups(d3.descending)
          .sortChords(d3.ascending);

      var path = d3.svg.chord()
          .radius(innerRadius);

      var svg = d3.select("body").append("svg")
          .attr("width", width)
          .attr("height", height)
        .append("g")
          .attr("id", "circle")
          .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

      svg.append("circle")
          .attr("r", outerRadius);

      d3.csv("districts.csv", function(districts) {
        d3.json("resources.json", function(matrix) {

          // Compute the chord layout.
          layout.matrix(matrix);

          // Add a group per neighborhood.
          var group = svg.selectAll(".group")
              .data(layout.groups)
            .enter().append("g")
              .attr("class", "group")
              .on("mouseover", mouseover);

          // Add a mouseover title.
          group.append("title").text(function(d, i) {
            return districts[i].name + ": " + Math.round( d.value );
          });

          // Add the group arc.
          var groupPath = group.append("path")
              .attr("id", function(d, i) { return "group" + i; })
              .attr("d", arc)
              .style("fill", function(d, i) { return colours[districts[i].parent]; });

          // Add a text label.
          var groupText = group.append("text")
              .attr("x", 6)
              .attr("dy", 15);

          groupText.append("textPath")
              .attr("xlink:href", function(d, i) { return "#group" + i; })
              .text(function(d, i) { return districts[i].name; });

          // Remove the labels that don't fit. :(
          groupText.filter(function(d, i) { return groupPath[0][i].getTotalLength() / 2 - 16 < this.getComputedTextLength(); })
              .remove();

          // Add the chords.
          var chord = svg.selectAll(".chord")
              .data(layout.chords)
            .enter().append("path")
              .attr("class", "chord")
              .style("fill", function(d) { return colours[districts[d.source.index].parent]; })
              .attr("d", path);

          // Add an elaborate mouseover title for each chord.
          chord.append("title").text(function(d) {
            return districts[d.source.index].name
                + " → " + districts[d.target.index].name
                + ": " + d.source.value
                + "\n" + districts[d.target.index].name
                + " → " + districts[d.source.index].name
                + ": " + d.target.value;
          });

          function mouseover(d, i) {
            chord.classed("fade", function(p) {
              return p.source.index != i
                  && p.target.index != i;
            });
          }
        });
      });

    </script>
  </body>
</html>